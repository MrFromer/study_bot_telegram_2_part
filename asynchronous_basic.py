import asyncio
from aiogram import Bot, Dispatcher, executor, types
<<<<<<< HEAD
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, ReplyKeyboardMarkup, KeyboardButton
=======
from aiogram.dispatcher.filters.state import StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
>>>>>>> dcf7d57a65e5aa42170acfeb246fe02cc0909743
from config import TOKEN_API
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.exceptions import BotBlocked
from aiogram.types import InlineQueryResultArticle, InputTextMessageContent
import hashlib
<<<<<<< HEAD
import uuid
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext

storage = MemoryStorage()
bot = Bot(TOKEN_API)
dp = Dispatcher(bot, storage=storage)
=======
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage

storage = MemoryStorage()
bot = Bot(TOKEN_API)
dp = Dispatcher(bot, storage)
>>>>>>> dcf7d57a65e5aa42170acfeb246fe02cc0909743

async def startup(_):
    print('–ë–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω')

# #19 —É—Ä–æ–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ asyncio

# # async def send_hello() -> None:
# #     await asyncio.sleep(2)
# #     print('Hello!')

# # async def send_bye() -> None:
# #     await asyncio.sleep(1)
# #     print('Bye')

# # async def main():
# #     task_1 = asyncio.create_task(send_hello())
# #     task_2 = asyncio.create_task(send_bye())

# #     await task_1
# #     await task_2

# # asyncio.run(main())

# #20 —É—Ä–æ–∫ –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–µ asyncio 
# # async def send_one() -> None:
# #     n = 0
# #     while True:
# #         await asyncio.sleep(1)
# #         n+=1
# #         if n%3 !=0:
# #             print(f'–ü—Ä–æ—à–ª–æ {n} —Å–µ–∫—É–Ω–¥')
# #         else:
# #             pass
   

# # async def send_three() -> None:
# #     n_2 = 0
# #     while True:
# #         await asyncio.sleep(3)
# #         n_2 +=3
# #         print(f'–ü—Ä–æ—à–ª–æ –µ—â—ë {n_2} —Å–µ–∫—É–Ω–¥—ã')

# # async def main() -> None:
# #     task_1 = asyncio.create_task(send_one())
# #     task_2 = asyncio.create_task(send_three())
# #     await task_1 
# #     await task_2

# # if __name__ == '__main__':
# #     asyncio.run(main())

# #21 —É—Ä–æ–∫ –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–µ asyncio –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é
# # async def send_time(sec: int) -> None:
# #     while True:
# #         await asyncio.sleep(sec)
# #         print(f'–ü—Ä–æ—à–ª–æ {sec} —Å–µ–∫—É–Ω–¥')

# # #print(send_time(2), send_time(5), sep='\n')

# # async def main() -> None:
# #     task_1 = asyncio.create_task(send_time(2)) #—ç—Ç–æ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∫–æ—Ä—É—Ç–∏–Ω (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏) –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
# #     task_2 = asyncio.create_task(send_time(5))
# #     await task_1
# #     await task_2


# # if __name__ == '__main__':
# #     asyncio.run(main())

# #22 —É—Ä–æ–∫ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ CallBack –∑–∞–ø—Ä–æ—Å—ã –∏ CallbackQuery

# # bot=Bot(token=TOKEN_API)
# # dp = Dispatcher(bot)

# # async def startup(_):
# #     print('–ë–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω')

# # ikb = InlineKeyboardMarkup(inline_keyboard=[
# #     [InlineKeyboardButton(text='‚ù§Ô∏è', callback_data='like'), InlineKeyboardButton(text='üëé', callback_data='dislike')],
# #     [],
# # ])



# # @dp.message_handler(commands=['start'])
# # async def starter(message: types.Message) -> None:
# #     await message.answer(text='–ü—Ä–∏–≤–µ—Ç!', reply_markup=ikb)
# #     await message.delete()

# # @dp.callback_query_handler()
# # async def ikb_cb_handler(callback: types.CallbackQuery):
# #     if callback.data == 'like':
# #         await callback.answer('–¢–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!')
# #     elif callback.data == 'dislike':
# #         await callback.answer('–¢–µ–±–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!')


# # if __name__ == '__main__':
# #     executor.start_polling(dp, skip_updates=True, on_startup=startup)

# #23 —É—Ä–æ–∫ –ø—Ä–∞–∫—Ç–∏–∫–∞ (—Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Ç—Ä—ë—Ö –æ–ø—Ü–∏–π: 1) —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é 2) –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ –∏–ª–∏ –¥–∏–∑–ª–∞–π–∫ 3) –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ–ø—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ, –Ω–∞–ø–∏—Å–∞—Ç—å –æ–± —ç—Ç–æ–º"
# bot=Bot(token=TOKEN_API)
# dp = Dispatcher(bot)

# async def startup(_):
#     print('–ë–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω')

# ikb = InlineKeyboardMarkup(inline_keyboard=[
#     [InlineKeyboardButton(text='‚ù§Ô∏è',callback_data='like'),InlineKeyboardButton(text='üëé',callback_data='dislike')],
#     [InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É', callback_data='close')]
# ])

# flag1 = False
# flag2 = False

# @dp.message_handler(commands=['photo'])
# async def sendphoto(message: types.Message):
#     await bot.send_photo(chat_id = message.chat.id, photo='https://i.pinimg.com/originals/f7/24/82/f72482a5e66279d82ccf845ef103860f.jpg', caption='–ö–∞–∫ —Ç–µ–±–µ —ç—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è?', reply_markup=ikb)
#     await message.delete()

# @dp.callback_query_handler(text='close')
# async def close_inlinekeyboard(callback: types.CallbackQuery) -> None:
#     await callback.message.delete()
    
# @dp.callback_query_handler()
# async def callbacker(callback: types.CallbackQuery):
#     global flag1
#     global flag2
#     if callback.data == 'like':
#         if flag1 == True:
#             await callback.answer('–¢—ã —É–∂–µ –ª–∞–π–∫–∞–ª –¥–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ', show_alert=True)
            
#         else:
#             #await callback.answer('–¢–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –¥–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ!')
#             await callback.answer('–¢–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –¥–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ!', show_alert=True)
#             flag1 = True

#     elif callback.data == 'dislike':
#         if flag2 == True:
#             await callback.answer('–¢—ã —É–∂–µ –¥–∏–∑–ª–∞–π–∫–∞–ª –¥–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ!', show_alert=True)
#         else:
#             await callback.answer('–¢–µ–±–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –¥–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ!', show_alert=True)
#             flag2 = True



# if __name__ == '__main__':
#     executor.start_polling(dp, skip_updates=True, on_startup=startup)


#24 –∏ 25 —É—Ä–æ–∫ –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Å—á—ë—Ç—á–∏–∫–∞ CallbackQuery, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞; (—Ç–∞–∫-–∂–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏ –∑–∞–¥–∞–Ω–∏–µ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –∏ –∑–∞–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è callback_data –∫–Ω–æ–ø–æ–∫)

# from aiogram import types, executor, Dispatcher, Bot
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
# from config import TOKEN_API
# from random import randint


# bot = Bot(TOKEN_API)
# dp = Dispatcher(bot)

# async def startup(_):
#     print('–ë–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω')

# number = 0

# def get_inline_keyboard() -> InlineKeyboardMarkup:
#     ikb = InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton('Increase', callback_data='btn_increase'), InlineKeyboardButton('Decrease', callback_data='btn_decrease'), InlineKeyboardButton('RandomInt', callback_data='btn_randint')],
#     ])

#     return ikb

# @dp.message_handler(commands=['start'])
# async def cmd_start(message: types.Message) -> None:
#     await message.answer(f'The current number is {number}', reply_markup=get_inline_keyboard())


# @dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('btn')) #callback_query - –∑–∞–ø—Ä–æ—Å –∫–æ–ª–±—ç–∫–∞
# async def ikb_cb_handler(callback: types.CallbackQuery) -> None:
#     global number 
    
    
#     if callback.data == 'btn_increase':
#         number += 1
#         await callback.message.edit_text(f'The current number is {number}',reply_markup=get_inline_keyboard())
#     elif callback.data == 'btn_decrease':
#         number -= 1
#         await callback.message.edit_text(f'The current number is {number}',reply_markup=get_inline_keyboard())
#     elif  callback.data == 'btn_randint':
#         randomint = randint(-1000,1000)
#         await callback.message.edit_text(f'–ü–æ–ª—É—á–∏–ª–æ—Å—å –≤–æ—Ç —Ç–∞–∫–æ–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ: {randomint}',reply_markup=get_inline_keyboard())
#     else:
#         1/0

# if __name__ == '__main__':
#     executor.start_polling(dispatcher=dp, skip_updates=True, on_startup=startup)

# 26 —É—Ä–æ–∫ –®–∞–±–ª–æ–Ω CallbackData() –∏ callback_data
# from aiogram import types, executor, Dispatcher, Bot
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
# from config import TOKEN_API
# from aiogram.utils.callback_data import CallbackData

# bot = Bot(TOKEN_API)
# dp = Dispatcher(bot)

# async def startup(_):
#     print('–ë–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω')

# cb = CallbackData('ikb','action') #—à–∞–±–ª–æ–Ω ikb - –ø—Ä–µ—Ñ–∏–∫—Å (–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã, –∫ –ø—Ä–∏–º–µ—Ä—É —Å —á–∏—Å–ª–∞–º–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º) action - —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å (–≤—ã–ø–æ–ª–Ω–∏—Ç—å)

# ikb = InlineKeyboardMarkup(inline_keyboard=[
#     [InlineKeyboardButton('Button', callback_data=cb.new('push'))],
# ])

# @dp.message_handler(commands=['start'])
# async def cmd_start(message: types.Message) -> None:
#     await message.answer('text',reply_markup=ikb)
    

# @dp.callback_query_handler(cb.filter()) #–º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Ñ–∏–ª—å—Ä –¥–ª—è cb, –∫ –ø—Ä–∏–º–µ—Ä—É cb.filter(action=push) —Ñ–∏–ª—å—Ç—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É pushs
# async def ikb_callback_handler(callback: types.CallbackQuery, callback_data: dict) -> None:
#     if callback_data['action'] == 'push':
#         await callback.answer('smth')
    


#27 —É—Ä–æ–∫ Errors Handler (–ò—Å–ª—é—á–µ–Ω–∏—è –•—ç–Ω–¥–ª–µ—Ä–æ–≤)

# @dp.message_handler(commands=['start'])
# async def cmd_start(message: types.Message) -> None:
#     await asyncio.sleep(10)
#     await message.answer('ddddd')

# @dp.errors_handler(exception=BotBlocked)
# async def error_bot_blocked(update: types.Update, exception: BotBlocked) -> bool:
#     print('–ù–∏–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏')
#     return True

#28-30 —É—Ä–æ–∫ Inline —Ä–µ–∂–∏–º; inline_query

#31 —É—Ä–æ–∫ —Å–æ–∑–¥–∞—ë–º Inline Echo –±–æ—Ç–∞

#–¢–£–¢ –ú–´ –î–ï–õ–ê–ï–ú –ë–û–¢–ê –° –§–ò–õ–¨–†–û–ú –ù–ê –î–ï–ô–°–¢–í–ò–ï INLINE –ö–ù–û–ü–ö–ò
# cb = CallbackData('ikb', 'action')
# def inline_keyboard() -> InlineKeyboardMarkup:
#     ikb = InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text='Button 1', callback_data=cb.new('push1')),InlineKeyboardButton(text='Button 2', callback_data=cb.new('push2'))],
#     ])
#     return ikb

# @dp.message_handler(commands=['start'])
# async def startbot(message: types.Message) -> None:
#     await bot.send_message(chat_id=message.chat.id, text='–°–∞–ª–∞–º –±—Ä–∞—Ç–∞–Ω–∞–º!', reply_markup=inline_keyboard())
#     #await message.delete()

# @dp.callback_query_handler(cb.filter(action='push1'))
# async def push_first(callback: types.CallbackQuery) -> None:
#     await callback.answer('Hello')

# @dp.callback_query_handler(cb.filter(action='push2'))
# async def push_second(callback: types.CallbackQuery) -> None:
#     await callback.answer('World!')

#–°–û–ó–î–ê–Å–ú ECHO BOTA –ß–ï–†–ï–ó INLINE –†–ï–ñ–ò–ú
# @dp.inline_handler() #–ø—Ä–æ—Ü–µ—Å—Å InlineQuery() —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ Telegram API
# async def inline_echo(inline_query: types.InlineQuery) -> None:
#     text = inline_query.query or 'Echo' #–ø–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     input_content = InputTextMessageContent(text) #—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
#     result_id = hashlib.md5(text.encode()).hexdigest() #–±–µ—Ä—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ --> –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –¥–≤–æ–∏—á–Ω—É—é —Å–∏—Å—Ç. —Å—á–∏—Å–ª–µ–Ω–∏—è --> –∫–æ–¥–∏—Ä—É–µ–º --> –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ 16-—Ç–∏ —Ä–∏—á–Ω—É—é (—Ç.–µ –º—ã –ø—Ä–æ—Å—Ç–æ –∏–∑ —Ç–µ–∫—Å—Ç —Å–¥–µ–ª–∞–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id)
#     item = InlineQueryResultArticle(input_message_content=input_content, id=result_id, title='Echo') #—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–Ω–∏–∂–µ –æ–Ω —Å—Ç–æ–∏—Ç –≤ result —Ç.–µ —Ç–æ, —á—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞)
#     await bot.answer_inline_query(inline_query_id=inline_query.id, results=[item], cache_time=1)

#32 —É—Ä–æ–∫ Inline –ë–æ—Ç - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É inline_query
# @dp.inline_handler()
# async def inline_answer(inline_query: types.InlineQuery) -> None:
#     text = inline_query.query or 'Echo' #—Å–æ–∑–¥–∞—ë–º —Å–∞–º –∑–∞–ø—Ä–æ—Å
#     input_content = InputTextMessageContent(text) #–ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     result_id = hashlib.md5(text.encode()).hexdigest()
    
#     if text =='photo':
#         input_content = InputTextMessageContent('This is a photo') #–ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
#     item = InlineQueryResultArticle(input_message_content=input_content, id=result_id, title=text)

#     await bot.answer_inline_query(inline_query_id=inline_query.id, results=[item],cache_time=1)

<<<<<<< HEAD
#34 —É—Ä–æ–∫ Urls Inline –ë–æ—Ç | Title, Description - –Ω–µ–ø–æ–Ω—è—Ç–Ω–∞—è —à–Ω—è–≥–∞
# class A:
#     x = 5
#     y = 2
#     def add(self, a: int, b: int) -> int:
#         return a + b
# a = A()
# print(a.add(5,3))
# A.add = classmethod(A.add)

#35 —É—Ä–æ–∫ –ü—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é echo –±–æ—Ç–∞ —á–µ—Ä–µ–∑ inline_query —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º, –∫—É—Ä—Å–∏–≤–æ–º –∏–ª–∏ –∫–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª - Empty
# @dp.inline_handler()
# async def inline_answer(inline_query: types.InlineQuery) -> None:
#     text = inline_query.query or 'Empty'
#     input_bold = types.InputTextMessageContent(message_text=f'*{text}*', parse_mode='markdown') #—á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–≤–µ–¥—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∞–ª—Å—è –∂–∏—Ä–Ω—ã–º
#     input_italic = types.InputTextMessageContent(message_text=f'_{text}_', parse_mode='markdown') #—á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–≤–µ–¥—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∞–ª—Å—è –∫—É—Ä—Å–∏–≤–æ–º
#     item_1 = types.InlineQueryResultArticle(id=str(uuid.uuid4()), input_message_content=input_bold, title='Bold', description=text, thumb_url='https://s.rbk.ru/v1_companies_s3/resized/1200xH/media/trademarks/3a072b7c-97fd-4cf4-be99-1cc9ba090933.jpg') 
#     #—Ç.–µ —Ç—É—Ç —á–µ—Ä–µ–∑ types –º—ã —Å–æ–∑–¥–∞—ë–º –±–æ–ª–µ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é InlineQuery –≤ id —á–µ—Ä–µ–∑ uuid –∏–Ω–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∞–π–¥–∏—à–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è; –¥–∞–ª–µ–µ –≤ input_message –≤–Ω–æ—Å–∏–º —Ç–µ–∫—Å—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º Bold; –≤ description —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å; –≤ thump_url = –∫–∞—Ä—Ç–∏–Ω–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ
#     item_2 = types.InlineQueryResultArticle(id=str(uuid.uuid4()), input_message_content=input_italic,  title='Italic', description=text, thumb_url='https://sgmsummers.files.wordpress.com/2014/10/italic.jpg')
#     await bot.answer_inline_query(inline_query_id=inline_query.id, results=[item_1,item_2],cache_time=1) #–≤ results –ø–µ—Ä–µ–¥–∞—ë—Ç –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞

#—É—Ä–æ–∫ FSM –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞ –Ω–∞ Python
#storage = MemoryStorage() - –æ–±—ä—è–≤–∏–ª —ç—Ç–æ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ. –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å, –¥–ª—è –Ω–µ –æ—Å–æ–±–æ –≤–∞–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ —á–µ—Ä–µ–∑ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π



storage = MemoryStorage()
bot = Bot(TOKEN_API)
dp = Dispatcher(bot=bot,
                storage=storage)

def get_keyboard() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!'))

    return kb

def get_cancel() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('/cancel'))


class ClientStatesGroup(StatesGroup):
    photo = State()
    desc = State()


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message) -> None:
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', reply_markup=get_keyboard())


@dp.message_handler(commands=['cancel'], state='*')
async def cmd_start(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return

    await message.reply('–û—Ç–º–µ–Ω–∏–ª', reply_markup=get_keyboard())
    await state.finish()


@dp.message_handler(Text(equals='–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!', ignore_case=True), state=None)
async def start_work(message: types.Message) -> None:
    await ClientStatesGroup.photo.set()
    await message.answer('–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!', reply_markup=get_cancel())


@dp.message_handler(lambda message: not message.photo, state=ClientStatesGroup.photo)
async def check_photo(message: types.Message):
    return await message.reply('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!')


@dp.message_handler(lambda message: message.photo, content_types=['photo'], state=ClientStatesGroup.photo)
async def load_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
    await ClientStatesGroup.next()
    await message.reply('–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–º –æ–ø–∏—Å–∞–Ω–∏–µ!')


@dp.message_handler(state=ClientStatesGroup.desc)
async def load_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['desc'] = message.text

    await message.reply('–í–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!')

    async with state.proxy() as data:
        await bot.send_photo(chat_id=message.from_user.id,
                             photo=data['photo'],
                             caption=data['desc'])

    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp,
                           skip_updates=True)
=======
#36 –∏ 37 —É—Ä–æ–∫ FSM - –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç
def btn() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('/create'))
    return kb
class Profile(StatesGroup):
    photo = State()
    name = State()
    age = State()
    desc = State()
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message) -> None:
    await message.answer('Welcome and write /create',reply_markup=btn())
>>>>>>> dcf7d57a65e5aa42170acfeb246fe02cc0909743

@dp.message_handler(commands=['create'])
async def cmd_create(message: types.Message) -> None:
    await message.answer('Create your profile! And send me your photo')
    await Profile.photo.set()

if __name__ == '__main__':
    executor.start_polling(dispatcher=dp, skip_updates=True, on_startup=startup)
