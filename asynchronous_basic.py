import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from config import TOKEN_API
#19 —É—Ä–æ–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ asyncio

# async def send_hello() -> None:
#     await asyncio.sleep(2)
#     print('Hello!')

# async def send_bye() -> None:
#     await asyncio.sleep(1)
#     print('Bye')

# async def main():
#     task_1 = asyncio.create_task(send_hello())
#     task_2 = asyncio.create_task(send_bye())

#     await task_1
#     await task_2

# asyncio.run(main())

#20 —É—Ä–æ–∫ –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–µ asyncio 
# async def send_one() -> None:
#     n = 0
#     while True:
#         await asyncio.sleep(1)
#         n+=1
#         if n%3 !=0:
#             print(f'–ü—Ä–æ—à–ª–æ {n} —Å–µ–∫—É–Ω–¥')
#         else:
#             pass
   

# async def send_three() -> None:
#     n_2 = 0
#     while True:
#         await asyncio.sleep(3)
#         n_2 +=3
#         print(f'–ü—Ä–æ—à–ª–æ –µ—â—ë {n_2} —Å–µ–∫—É–Ω–¥—ã')

# async def main() -> None:
#     task_1 = asyncio.create_task(send_one())
#     task_2 = asyncio.create_task(send_three())
#     await task_1 
#     await task_2

# if __name__ == '__main__':
#     asyncio.run(main())

#21 —É—Ä–æ–∫ –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–µ asyncio –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é
# async def send_time(sec: int) -> None:
#     while True:
#         await asyncio.sleep(sec)
#         print(f'–ü—Ä–æ—à–ª–æ {sec} —Å–µ–∫—É–Ω–¥')

# #print(send_time(2), send_time(5), sep='\n')

# async def main() -> None:
#     task_1 = asyncio.create_task(send_time(2)) #—ç—Ç–æ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∫–æ—Ä—É—Ç–∏–Ω (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏) –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
#     task_2 = asyncio.create_task(send_time(5))
#     await task_1
#     await task_2


# if __name__ == '__main__':
#     asyncio.run(main())

#22 —É—Ä–æ–∫ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ CallBack –∑–∞–ø—Ä–æ—Å—ã –∏ CallbackQuery

# bot=Bot(token=TOKEN_API)
# dp = Dispatcher(bot)

# async def startup(_):
#     print('–ë–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω')

# ikb = InlineKeyboardMarkup(inline_keyboard=[
#     [InlineKeyboardButton(text='‚ù§Ô∏è', callback_data='like'), InlineKeyboardButton(text='üëé', callback_data='dislike')],
#     [],
# ])



# @dp.message_handler(commands=['start'])
# async def starter(message: types.Message) -> None:
#     await message.answer(text='–ü—Ä–∏–≤–µ—Ç!', reply_markup=ikb)
#     await message.delete()

# @dp.callback_query_handler()
# async def ikb_cb_handler(callback: types.CallbackQuery):
#     if callback.data == 'like':
#         await callback.answer('–¢–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!')
#     elif callback.data == 'dislike':
#         await callback.answer('–¢–µ–±–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!')


# if __name__ == '__main__':
#     executor.start_polling(dp, skip_updates=True, on_startup=startup)

#23 —É—Ä–æ–∫ –ø—Ä–∞–∫—Ç–∏–∫–∞ (—Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Ç—Ä—ë—Ö –æ–ø—Ü–∏–π: 1) —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é 2) –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ –∏–ª–∏ –¥–∏–∑–ª–∞–π–∫ 3) –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ–ø—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ, –Ω–∞–ø–∏—Å–∞—Ç—å –æ–± —ç—Ç–æ–º"
bot=Bot(token=TOKEN_API)
dp = Dispatcher(bot)

async def startup(_):
    print('–ë–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω')

ikb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚ù§Ô∏è',callback_data='like'),InlineKeyboardButton(text='üëé',callback_data='dislike')],
    [InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É', callback_data='close')]
])

flag1 = False
flag2 = False

@dp.message_handler(commands=['photo'])
async def sendphoto(message: types.Message):
    await bot.send_photo(chat_id = message.chat.id, photo='https://i.pinimg.com/originals/f7/24/82/f72482a5e66279d82ccf845ef103860f.jpg', caption='–ö–∞–∫ —Ç–µ–±–µ —ç—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è?', reply_markup=ikb)
    await message.delete()

@dp.callback_query_handler(text='close')
async def close_inlinekeyboard(callback: types.CallbackQuery) -> None:
    await callback.message.delete()
    
@dp.callback_query_handler()
async def callbacker(callback: types.CallbackQuery):
    global flag1
    global flag2
    if callback.data == 'like':
        if flag1 == True:
            await callback.answer('–¢—ã —É–∂–µ –ª–∞–π–∫–∞–ª –¥–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ', show_alert=True)
            
        else:
            #await callback.answer('–¢–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –¥–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ!')
            await callback.answer('–¢–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –¥–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ!', show_alert=True)
            flag1 = True

    elif callback.data == 'dislike':
        if flag2 == True:
            await callback.answer('–¢—ã —É–∂–µ –¥–∏–∑–ª–∞–π–∫–∞–ª –¥–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ!', show_alert=True)
        else:
            await callback.answer('–¢–µ–±–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –¥–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ!', show_alert=True)
            flag2 = True




if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=startup)